// Sistema b√°sico de comunidad de usuarios
class CommunitySystem {
    constructor() {
        this.communityData = {
            leaderboard: [],
            userAchievements: [],
            reviews: [],
            sharedProgress: []
        };

        this.currentUser = null;
        this.init();
    }

    init() {
        console.log("üë• Inicializando sistema de comunidad...");
        this.loadCommunityData();
        this.currentUser = this.getCurrentUser();
        console.log("‚úÖ Sistema de comunidad inicializado");
    }

    getCurrentUser() {
        try {
            // Obtener usuario actual del sistema de autenticaci√≥n
            if (window.appState && window.appState.currentUser) {
                return window.appState.currentUser;
            }

            // Fallback: usuario guest
            return {
                id: 'guest_' + Date.now(),
                name: 'Usuario',
                email: 'guest@example.com',
                level: 1,
                xp: 0
            };
        } catch (error) {
            console.error("‚ùå Error al obtener usuario actual:", error);
            return null;
        }
    }

    loadCommunityData() {
        try {
            // Cargar datos de comunidad desde localStorage (simulando una base de datos compartida)
            const storedData = localStorage.getItem('communityData');
            if (storedData) {
                this.communityData = { ...this.communityData, ...JSON.parse(storedData) };
            }
            console.log("‚úÖ Datos de comunidad cargados");
        } catch (error) {
            console.error("‚ùå Error al cargar datos de comunidad:", error);
        }
    }

    saveCommunityData() {
        try {
            localStorage.setItem('communityData', JSON.stringify(this.communityData));
            console.log("üíæ Datos de comunidad guardados");
        } catch (error) {
            console.error("‚ùå Error al guardar datos de comunidad:", error);
        }
    }

    // Sistema de leaderboard/ranking
    updateLeaderboard() {
        try {
            // Simular datos de otros usuarios (en producci√≥n vendr√≠an de una API)
            const mockUsers = [
                { id: 'user1', name: 'Ana Garc√≠a', level: 5, xp: 1250, achievements: 12 },
                { id: 'user2', name: 'Carlos L√≥pez', level: 4, xp: 980, achievements: 9 },
                { id: 'user3', name: 'Mar√≠a Rodr√≠guez', level: 6, xp: 1450, achievements: 15 },
                { id: 'user4', name: 'Juan P√©rez', level: 3, xp: 750, achievements: 7 },
                { id: 'user5', name: 'Laura Mart√≠nez', level: 4, xp: 1020, achievements: 11 }
            ];

            // Agregar usuario actual si existe
            if (this.currentUser) {
                const currentUserData = {
                    id: this.currentUser.id,
                    name: this.currentUser.name || 'T√∫',
                    level: window.appState?.currentLevel || 1,
                    xp: window.appState?.currentXP || 0,
                    achievements: this.getUserAchievementsCount(),
                    isCurrentUser: true
                };
                mockUsers.push(currentUserData);
            }

            // Ordenar por XP descendente
            this.communityData.leaderboard = mockUsers.sort((a, b) => b.xp - a.xp);

            this.saveCommunityData();
            console.log("üèÜ Leaderboard actualizado");

        } catch (error) {
            console.error("‚ùå Error al actualizar leaderboard:", error);
        }
    }

    getUserAchievementsCount() {
        try {
            // Contar logros desbloqueados
            if (window.ACHIEVEMENTS_SYSTEM && window.ACHIEVEMENTS_SYSTEM.achievements) {
                return window.ACHIEVEMENTS_SYSTEM.achievements.filter(a => a.unlocked).length;
            }
            return 0;
        } catch (error) {
            return 0;
        }
    }

    // Sistema de rese√±as y comentarios
    addReview(content, rating = 5) {
        try {
            if (!this.currentUser) {
                showNotification('Debes iniciar sesi√≥n para dejar rese√±as', 'warning');
                return false;
            }

            const review = {
                id: 'review_' + Date.now(),
                userId: this.currentUser.id,
                userName: this.currentUser.name,
                content: content,
                rating: rating,
                timestamp: new Date().toISOString(),
                likes: 0,
                helpful: 0
            };

            this.communityData.reviews.unshift(review);
            this.saveCommunityData();

            showNotification('¬°Rese√±a publicada!', 'success');
            console.log("üìù Rese√±a agregada:", review);
            return true;

        } catch (error) {
            console.error("‚ùå Error al agregar rese√±a:", error);
            showNotification('Error al publicar la rese√±a', 'error');
            return false;
        }
    }

    // Sistema de logros compartidos
    shareAchievement(achievementId) {
        try {
            if (!this.currentUser) return false;

            const achievement = window.ACHIEVEMENTS_SYSTEM?.achievements?.find(a => a.id === achievementId);
            if (!achievement || !achievement.unlocked) return false;

            const sharedAchievement = {
                id: 'shared_' + Date.now(),
                userId: this.currentUser.id,
                userName: this.currentUser.name,
                achievementId: achievementId,
                achievementTitle: achievement.title,
                achievementDescription: achievement.description,
                timestamp: new Date().toISOString(),
                likes: 0
            };

            this.communityData.sharedProgress.push(sharedAchievement);
            this.saveCommunityData();

            showNotification(`¬°Logro "${achievement.title}" compartido!`, 'success');
            console.log("üéâ Logro compartido:", sharedAchievement);
            return true;

        } catch (error) {
            console.error("‚ùå Error al compartir logro:", error);
            return false;
        }
    }

    // Sistema de consejos y motivaci√≥n
    getMotivationalTips() {
        const tips = [
            "¬°Sigue practicando! La consistencia es la clave del √©xito.",
            "Cada palabra nueva es un paso m√°s hacia la fluidez.",
            "No te desanimes por los errores, son parte del aprendizaje.",
            "Practica diariamente, aunque sea solo 10 minutos.",
            "Comparte tus logros con la comunidad para motivar a otros.",
            "El aprendizaje de idiomas es un viaje, disfruta el proceso.",
            "Celebra cada lecci√≥n completada, ¬°eres incre√≠ble!",
            "Recuerda por qu√© empezaste, tu motivaci√≥n te llevar√° lejos."
        ];

        return tips[Math.floor(Math.random() * tips.length)];
    }

    // Crear UI de comunidad
    createCommunityUI() {
        const communityContainer = document.createElement('div');
        communityContainer.className = 'community-container';

        communityContainer.innerHTML = `
            <h2><i class="fas fa-users"></i> Comunidad</h2>

            <!-- Mensaje motivacional -->
            <div class="motivational-banner">
                <div class="motivational-content">
                    <i class="fas fa-lightbulb"></i>
                    <p id="motivationalTip">${this.getMotivationalTips()}</p>
                    <button class="btn btn-secondary" onclick="communitySystem.refreshMotivationalTip()">
                        <i class="fas fa-sync-alt"></i> Otro consejo
                    </button>
                </div>
            </div>

            <!-- Leaderboard -->
            <div class="community-section">
                <h3><i class="fas fa-trophy"></i> Ranking de la Comunidad</h3>
                <div id="leaderboardContainer">
                    <!-- El leaderboard se cargar√° aqu√≠ -->
                </div>
            </div>

            <!-- Logros compartidos -->
            <div class="community-section">
                <h3><i class="fas fa-star"></i> Logros Recientes</h3>
                <div id="sharedAchievementsContainer">
                    <!-- Los logros compartidos se cargar√°n aqu√≠ -->
                </div>
            </div>

            <!-- Rese√±as -->
            <div class="community-section">
                <h3><i class="fas fa-comments"></i> Rese√±as de Usuarios</h3>
                <div id="reviewsContainer">
                    <!-- Las rese√±as se cargar√°n aqu√≠ -->
                </div>

                <!-- Formulario para agregar rese√±a -->
                <div class="add-review-section">
                    <h4>Comparte tu opini√≥n</h4>
                    <div class="review-form">
                        <div class="rating-stars">
                            <span>Calificaci√≥n:</span>
                            <div class="stars" id="ratingStars">
                                ${[1,2,3,4,5].map(i => `<i class="far fa-star" data-rating="${i}"></i>`).join('')}
                            </div>
                        </div>
                        <textarea id="reviewContent" placeholder="¬øQu√© te parece la aplicaci√≥n? Comparte tu experiencia..." rows="3"></textarea>
                        <button class="btn btn-primary" onclick="communitySystem.submitReview()">
                            <i class="fas fa-paper-plane"></i> Publicar Rese√±a
                        </button>
                    </div>
                </div>
            </div>
        `;

        return communityContainer;
    }

    refreshMotivationalTip() {
        const tipElement = document.getElementById('motivationalTip');
        if (tipElement) {
            tipElement.textContent = this.getMotivationalTips();
        }
    }

    createLeaderboardUI() {
        this.updateLeaderboard();

        const leaderboardHTML = this.communityData.leaderboard.map((user, index) => `
            <div class="leaderboard-item ${user.isCurrentUser ? 'current-user' : ''}">
                <div class="rank">${index + 1}</div>
                <div class="user-info">
                    <div class="user-name">${user.name} ${user.isCurrentUser ? '(T√∫)' : ''}</div>
                    <div class="user-stats">
                        Nivel ${user.level} ‚Ä¢ ${user.xp} XP ‚Ä¢ ${user.achievements} logros
                    </div>
                </div>
                <div class="user-score">${user.xp}</div>
            </div>
        `).join('');

        return `<div class="leaderboard">${leaderboardHTML}</div>`;
    }

    createSharedAchievementsUI() {
        if (this.communityData.sharedProgress.length === 0) {
            return '<p class="no-content">No hay logros compartidos a√∫n. ¬°S√© el primero en compartir tus logros!</p>';
        }

        const achievementsHTML = this.communityData.sharedProgress.slice(0, 5).map(achievement => `
            <div class="shared-achievement-card">
                <div class="achievement-header">
                    <strong>${achievement.userName}</strong> desbloque√≥ un logro
                    <span class="timestamp">${this.formatTimestamp(achievement.timestamp)}</span>
                </div>
                <div class="achievement-content">
                    <i class="fas fa-trophy achievement-icon"></i>
                    <div class="achievement-details">
                        <h4>${achievement.achievementTitle}</h4>
                        <p>${achievement.achievementDescription}</p>
                    </div>
                </div>
                <div class="achievement-actions">
                    <button class="like-btn" onclick="communitySystem.likeAchievement('${achievement.id}')">
                        <i class="fas fa-heart"></i> ${achievement.likes}
                    </button>
                </div>
            </div>
        `).join('');

        return `<div class="shared-achievements">${achievementsHTML}</div>`;
    }

    createReviewsUI() {
        if (this.communityData.reviews.length === 0) {
            return '<p class="no-content">No hay rese√±as a√∫n. ¬°S√© el primero en compartir tu opini√≥n!</p>';
        }

        const reviewsHTML = this.communityData.reviews.map(review => `
            <div class="review-card">
                <div class="review-header">
                    <strong>${review.userName}</strong>
                    <div class="review-rating">
                        ${this.createStarRating(review.rating)}
                    </div>
                    <span class="timestamp">${this.formatTimestamp(review.timestamp)}</span>
                </div>
                <div class="review-content">
                    <p>${review.content}</p>
                </div>
                <div class="review-actions">
                    <button class="helpful-btn" onclick="communitySystem.markHelpful('${review.id}')">
                        <i class="fas fa-thumbs-up"></i> √ötil (${review.helpful})
                    </button>
                </div>
            </div>
        `).join('');

        return `<div class="reviews-list">${reviewsHTML}</div>`;
    }

    createStarRating(rating) {
        return [1,2,3,4,5].map(i =>
            `<i class="${i <= rating ? 'fas' : 'far'} fa-star"></i>`
        ).join('');
    }

    formatTimestamp(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diffMs = now - date;
        const diffHours = diffMs / (1000 * 60 * 60);

        if (diffHours < 1) {
            return 'Hace menos de una hora';
        } else if (diffHours < 24) {
            return `Hace ${Math.floor(diffHours)} horas`;
        } else {
            return date.toLocaleDateString();
        }
    }

    submitReview() {
        const content = document.getElementById('reviewContent')?.value?.trim();
        const rating = this.getSelectedRating();

        if (!content) {
            showNotification('Por favor escribe tu rese√±a', 'warning');
            return;
        }

        if (this.addReview(content, rating)) {
            // Limpiar formulario
            document.getElementById('reviewContent').value = '';
            this.resetRatingStars();

            // Actualizar UI
            this.refreshCommunityUI();
        }
    }

    getSelectedRating() {
        // Obtener rating seleccionado de las estrellas
        const stars = document.querySelectorAll('#ratingStars i');
        let rating = 5; // Default

        stars.forEach((star, index) => {
            if (star.classList.contains('fas')) {
                rating = index + 1;
            }
        });

        return rating;
    }

    resetRatingStars() {
        const stars = document.querySelectorAll('#ratingStars i');
        stars.forEach(star => {
            star.classList.remove('fas');
            star.classList.add('far');
        });
    }

    likeAchievement(achievementId) {
        const achievement = this.communityData.sharedProgress.find(a => a.id === achievementId);
        if (achievement) {
            achievement.likes++;
            this.saveCommunityData();
            this.refreshCommunityUI();
        }
    }

    markHelpful(reviewId) {
        const review = this.communityData.reviews.find(r => r.id === reviewId);
        if (review) {
            review.helpful++;
            this.saveCommunityData();
            this.refreshCommunityUI();
        }
    }

    refreshCommunityUI() {
        // Actualizar leaderboard
        const leaderboardContainer = document.getElementById('leaderboardContainer');
        if (leaderboardContainer) {
            leaderboardContainer.innerHTML = this.createLeaderboardUI();
        }

        // Actualizar logros compartidos
        const achievementsContainer = document.getElementById('sharedAchievementsContainer');
        if (achievementsContainer) {
            achievementsContainer.innerHTML = this.createSharedAchievementsUI();
        }

        // Actualizar rese√±as
        const reviewsContainer = document.getElementById('reviewsContainer');
        if (reviewsContainer) {
            reviewsContainer.innerHTML = this.createReviewsUI();
        }
    }

    showCommunity() {
        const mainContent = document.getElementById('mainContent');
        if (mainContent) {
            mainContent.innerHTML = '';
            mainContent.appendChild(this.createCommunityUI());

            // Configurar event listeners para las estrellas de rating
            this.setupRatingStars();

            // Cargar datos iniciales
            this.refreshCommunityUI();
        }
    }

    setupRatingStars() {
        const stars = document.querySelectorAll('#ratingStars i');
        stars.forEach((star, index) => {
            star.addEventListener('click', () => {
                // Reset all stars
                stars.forEach(s => {
                    s.classList.remove('fas');
                    s.classList.add('far');
                });

                // Fill stars up to clicked one
                for (let i = 0; i <= index; i++) {
                    stars[i].classList.remove('far');
                    stars[i].classList.add('fas');
                }
            });
        });
    }
}

// Instancia global del sistema de comunidad
window.communitySystem = new CommunitySystem();

// Funciones globales para acceso desde HTML
window.showCommunity = () => window.communitySystem.showCommunity();