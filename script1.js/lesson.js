// M√≥dulo de lecciones: carga y gesti√≥n de lecciones, progreso, repaso

function loadCurrentLesson() {
    console.log("üìö Iniciando carga de lecci√≥n actual...");
    console.log("üéØ appState.currentLesson:", appState.currentLesson);
    
    const allowedLessons = getAllowedLessonsByLevel();
    console.log("üìã Lecciones permitidas:", allowedLessons.length);
    console.log("üìã Lecciones disponibles:", allowedLessons.map(l => l.title));
    
    const currentLesson = allowedLessons[appState.currentLesson];
    if (!currentLesson) {
        console.warn("‚ö†Ô∏è No se encontr√≥ lecci√≥n para el √≠ndice:", appState.currentLesson);
        console.warn("‚ö†Ô∏è √çndice fuera de rango. Total lecciones:", allowedLessons.length);
        return;
    }
    
    console.log("‚úÖ Lecci√≥n encontrada:", currentLesson.title);
    console.log("‚úÖ Vocabulario de la lecci√≥n:", currentLesson.vocabulary.length, "palabras");
    
    try {
        // Actualizar t√≠tulo y dificultad
        const lessonTitleElement = document.getElementById('lessonTitle');
        const lessonDifficultyElement = document.getElementById('lessonDifficulty');
        
        if (lessonTitleElement) {
            lessonTitleElement.textContent = currentLesson.title;
            console.log("üìù T√≠tulo actualizado:", currentLesson.title);
        } else {
            console.warn("‚ö†Ô∏è Elemento lessonTitle no encontrado");
        }
        
        if (lessonDifficultyElement) {
            lessonDifficultyElement.textContent = currentLesson.difficulty;
            console.log("üìù Dificultad actualizada:", currentLesson.difficulty);
        } else {
            console.warn("‚ö†Ô∏è Elemento lessonDifficulty no encontrado");
        }
        
        // Verificar si la lecci√≥n ya fue completada
        const isCompleted = isLessonCompleted(appState.currentLesson);
        const lessonHeader = document.querySelector('.lesson-header');
        
        // Agregar o actualizar indicador de completado
        let completedBadge = lessonHeader.querySelector('.completed-badge');
        if (isCompleted) {
            if (!completedBadge) {
                completedBadge = document.createElement('span');
                completedBadge.className = 'completed-badge';
                lessonHeader.appendChild(completedBadge);
            }
            completedBadge.innerHTML = `<i class="fas fa-check-circle"></i> Completada`;
        } else if (completedBadge) {
            completedBadge.remove();
        }
        
        // Cargar vocabulario
        const vocabularyGrid = document.getElementById('vocabularyGrid');
        if (vocabularyGrid) {
            vocabularyGrid.innerHTML = '';
            console.log("üßπ Vocabulario anterior limpiado");
            
            currentLesson.vocabulary.forEach((item, index) => {
                const vocabItem = document.createElement('div');
                vocabItem.className = 'vocabulary-item';
                vocabItem.innerHTML = `
                    <div class="vocab-header">
                        <div class="english">${item.english}</div>
                        <div class="pronunciation-buttons">
                            <button class="speak-btn" onclick="speakText('${item.english}', 'en-US')" title="Escuchar pronunciaci√≥n">
                                <i class="fas fa-volume-up"></i>
                            </button>
                        </div>
                    </div>
                    <div class="spanish">${item.spanish}</div>
                    <div class="pronunciation">[${item.pronunciation}]</div>
                `;
                vocabularyGrid.appendChild(vocabItem);
                console.log(`üìö Vocabulario ${index + 1} agregado:`, item.english);
            });
            console.log("üìö Vocabulario cargado:", currentLesson.vocabulary.length, "palabras");
        } else {
            console.warn("‚ö†Ô∏è Elemento vocabularyGrid no encontrado");
        }
        
        // Cargar gram√°tica
        const grammarContent = document.getElementById('grammarContent');
        if (grammarContent) {
            grammarContent.innerHTML = `
                <h5>${currentLesson.grammar.title}</h5>
                <p>${currentLesson.grammar.content}</p>
            `;
            console.log("üìñ Gram√°tica cargada:", currentLesson.grammar.title);
        } else {
            console.warn("‚ö†Ô∏è Elemento grammarContent no encontrado");
        }
        
        // Actualizar estado del bot√≥n "siguiente lecci√≥n"
        updateNextLessonButton();
        
        // Sincronizar con el estado global y actualizar UI
        console.log("üîÑ Sincronizando estado global...");
        
        // Actualizar UI si est√° disponible
        if (typeof updateUI === 'function') {
            console.log("üé® Actualizando UI...");
            updateUI();
        }
        
        // Actualizar display del usuario si est√° disponible
        if (typeof updateUserDisplay === 'function') {
            console.log("üë§ Actualizando display del usuario...");
            const currentUser = getCurrentUser();
            if (currentUser) {
                updateUserDisplay(currentUser);
            }
        }
        
        // Guardar progreso si est√° disponible
        if (typeof saveProgress === 'function') {
            console.log("üíæ Guardando progreso...");
            saveProgress();
        }
        
        console.log("‚úÖ Lecci√≥n cargada exitosamente:", currentLesson.title);
    } catch (error) {
        console.error("‚ùå Error al cargar la lecci√≥n:", error);
        console.error("‚ùå Stack trace:", error.stack);
    }
}

// Funci√≥n para actualizar el estado del bot√≥n "siguiente lecci√≥n"
function updateNextLessonButton() {
    const nextLessonBtn = document.getElementById('nextLessonBtn');
    if (!nextLessonBtn) return;
    
    const allowedLessons = getAllowedLessonsByLevel();
    const hasNextLesson = appState.currentLesson < allowedLessons.length - 1;
    
    if (hasNextLesson) {
        nextLessonBtn.disabled = false;
        nextLessonBtn.classList.remove('btn-disabled');
        nextLessonBtn.classList.add('btn-primary');
        nextLessonBtn.title = 'Avanzar a la siguiente lecci√≥n';
    } else {
        nextLessonBtn.disabled = true;
        nextLessonBtn.classList.remove('btn-primary');
        nextLessonBtn.classList.add('btn-disabled');
        nextLessonBtn.title = 'No hay m√°s lecciones disponibles';
    }
}

// Funci√≥n para avanzar a la siguiente lecci√≥n
function nextLesson() {
    console.log("üöÄ Avanzando a la siguiente lecci√≥n...");
    console.log("üéØ Lecci√≥n actual antes del avance:", appState.currentLesson);
    
    const allowedLessons = getAllowedLessonsByLevel();
    console.log("üìã Total de lecciones disponibles:", allowedLessons.length);
    console.log("üìã Lecciones disponibles:", allowedLessons.map(l => l.title));
    
    // Marcar la lecci√≥n actual como completada y sumar XP
    const currentLessonId = appState.currentLesson;
    if (!isLessonCompleted(currentLessonId)) {
        console.log("üéØ Marcando lecci√≥n como completada y sumando XP...");
        markLessonCompleted(currentLessonId);
        appState.lessonsCompleted++;
        appState.currentXP += LEVEL_SYSTEM.xpPerLesson;
        appState.vocabularyWordsLearned += allowedLessons[currentLessonId].vocabulary.length;
        
        console.log("‚úÖ XP sumado:", LEVEL_SYSTEM.xpPerLesson);
        console.log("üìä XP total:", appState.currentXP);
        console.log("üìö Lecciones completadas:", appState.lessonsCompleted);
        
        // Actualizar progreso semanal
        const today = new Date().getDay();
        const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
        const currentDay = dayNames[today];
        appState.weeklyProgress[currentDay] += LEVEL_SYSTEM.xpPerLesson;
        
        // Verificar si subi√≥ de nivel
        const leveledUp = checkLevelUp();
        
        // Mostrar notificaci√≥n de XP
        if (typeof showNotification === 'function') {
            const xpMessage = leveledUp ? 
                `üéâ ¬°Subiste de nivel! +${LEVEL_SYSTEM.xpPerLesson} XP` : 
                `‚úÖ Lecci√≥n completada! +${LEVEL_SYSTEM.xpPerLesson} XP`;
            showNotification(xpMessage, 'success');
        } else {
            const xpMessage = leveledUp ? 
                `üéâ ¬°Subiste de nivel! +${LEVEL_SYSTEM.xpPerLesson} XP` : 
                `‚úÖ Lecci√≥n completada! +${LEVEL_SYSTEM.xpPerLesson} XP`;
            alert(xpMessage);
        }
    } else {
        console.log("‚ÑπÔ∏è Lecci√≥n ya completada anteriormente, no se suma XP");
    }
    
    // Verificar si hay siguiente lecci√≥n DESPU√âS de procesar la actual
    const hasNextLesson = appState.currentLesson < allowedLessons.length - 1;
    console.log("‚úÖ ¬øHay siguiente lecci√≥n?", hasNextLesson);
    
    if (!hasNextLesson) {
        console.log("üèÅ No hay m√°s lecciones disponibles");
        if (typeof showNotification === 'function') {
            showNotification('¬°Felicidades! Has completado todas las lecciones disponibles para tu nivel. üéì', 'success');
        } else {
            alert('¬°Felicidades! Has completado todas las lecciones disponibles para tu nivel. üéì');
        }
        
        // A√∫n as√≠, actualizar la UI y el progreso
        if (typeof updateUI === 'function') {
            console.log("üîÑ Actualizando UI...");
            updateUI();
        }
        
        if (typeof updateUserDisplay === 'function') {
            console.log("üîÑ Actualizando display del usuario...");
            const currentUser = getCurrentUser();
            if (currentUser) {
                updateUserDisplay(currentUser);
            }
        }
        
        if (typeof saveProgress === 'function') {
            console.log("üíæ Guardando progreso...");
            saveProgress();
        }
        
        return;
    }
    
    // Avanzar al siguiente √≠ndice de lecci√≥n
    appState.currentLesson++;
    console.log("üìö Nueva lecci√≥n actual:", appState.currentLesson);
    console.log("üìö T√≠tulo de la nueva lecci√≥n:", allowedLessons[appState.currentLesson].title);
    
    // Cargar la nueva lecci√≥n
    console.log("üîÑ Llamando a loadCurrentLesson...");
    loadCurrentLesson();
    
    // Sincronizar estado global despu√©s de cargar la lecci√≥n
    console.log("üîÑ Sincronizando estado global...");
    syncGlobalState();
    
    console.log("‚úÖ Avance de lecci√≥n completado exitosamente");
}

// Funci√≥n para verificar si una lecci√≥n est√° completada
function isLessonCompleted(lessonId) {
    const completedLessons = JSON.parse(localStorage.getItem('completedLessons') || '[]');
    return completedLessons.includes(lessonId);
}

// Funci√≥n para marcar una lecci√≥n como completada
function markLessonCompleted(lessonId) {
    const completedLessons = JSON.parse(localStorage.getItem('completedLessons') || '[]');
    if (!completedLessons.includes(lessonId)) {
        completedLessons.push(lessonId);
        localStorage.setItem('completedLessons', JSON.stringify(completedLessons));
    }
}

// Funci√≥n para verificar si subi√≥ de nivel
function checkLevelUp() {
    const currentLevel = appState.currentLevel;
    const currentXP = appState.currentXP;
    
    console.log("üîç Verificando subida de nivel...");
    console.log("üìä Nivel actual:", currentLevel);
    console.log("üìä XP actual:", currentXP);
    
    // Buscar el siguiente nivel
    const nextLevel = LEVEL_SYSTEM.levels.find(level => level.level === currentLevel + 1);
    
    if (nextLevel && currentXP >= nextLevel.xpRequired) {
        console.log("üéâ ¬°Subiendo de nivel!");
        console.log("üìà De nivel", currentLevel, "a nivel", nextLevel.level);
        
        appState.currentLevel = nextLevel.level;
        
        // Mostrar notificaci√≥n de subida de nivel
        if (typeof showNotification === 'function') {
            showNotification(`üéâ ¬°Subiste al nivel ${nextLevel.level}: ${nextLevel.title}!`, 'success');
        } else {
            alert(`üéâ ¬°Subiste al nivel ${nextLevel.level}: ${nextLevel.title}!`);
        }
        
        // Actualizar la UI para mostrar el nuevo nivel
        if (typeof updateUI === 'function') {
            updateUI();
        }
        
        // Actualizar el display del usuario
        if (typeof updateUserDisplay === 'function') {
            const currentUser = getCurrentUser();
            if (currentUser) {
                updateUserDisplay(currentUser);
            }
        }
        
        return true;
    }
    
    console.log("‚ÑπÔ∏è No hay subida de nivel por ahora");
    return false;
}


function completeLesson() {
    const currentLessonId = appState.currentLesson;
    
    // Verificar si la lecci√≥n ya fue completada
    if (isLessonCompleted(currentLessonId)) {
        if (typeof showNotification === 'function') {
            showNotification('Esta lecci√≥n ya fue completada anteriormente.', 'info');
        } else {
            alert('Esta lecci√≥n ya fue completada anteriormente.');
        }
        // Solo avanzar a la siguiente lecci√≥n sin sumar XP
        appState.currentLesson++;
        if (appState.currentLesson >= LESSONS_DATABASE.level1.length) {
            appState.currentLesson = 0; // Volver al inicio si se completaron todas
        }
        loadCurrentLesson();
        return;
    }
    
    // Marcar lecci√≥n como completada y sumar XP
    markLessonCompleted(currentLessonId);
    appState.lessonsCompleted++;
    appState.currentXP += LEVEL_SYSTEM.xpPerLesson;
    appState.vocabularyWordsLearned += LESSONS_DATABASE.level1[currentLessonId].vocabulary.length;
    
    // Actualizar progreso semanal
    const today = new Date().getDay();
    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const currentDay = dayNames[today];
    appState.weeklyProgress[currentDay] += LEVEL_SYSTEM.xpPerLesson;
    
    // Verificar si subi√≥ de nivel
    const leveledUp = checkLevelUp();
    
    // Mostrar notificaci√≥n
    const xpMessage = leveledUp ? 
        `¬°Lecci√≥n completada! +${LEVEL_SYSTEM.xpPerLesson} XP` : 
        `¬°Lecci√≥n completada! +${LEVEL_SYSTEM.xpPerLesson} XP`;
    if (typeof showNotification === 'function') {
        showNotification(xpMessage, 'success');
    } else {
        alert(xpMessage);
    }
    
    // Avanzar a la siguiente lecci√≥n
    appState.currentLesson++;
    if (appState.currentLesson >= LESSONS_DATABASE.level1.length) {
        appState.currentLesson = 0; // Volver al inicio si se completaron todas
    }
    loadCurrentLesson();
    
    // Actualizar el estado del bot√≥n "siguiente lecci√≥n"
    updateNextLessonButton();
}

function reviewLesson() {
    if (typeof showNotification === 'function') {
        showNotification('Repasando lecci√≥n actual...', 'info');
    } else {
        alert('Repasando lecci√≥n actual...');
    }
}



function getAllowedLessonsByLevel() {
    console.log("üìö Iniciando obtenci√≥n de lecciones permitidas por nivel...");
    try {
        // Obtener el nivel actual del usuario
        let userLevel = 1;
        
        // Intentar obtener desde appState primero
        if (typeof appState !== 'undefined' && appState.currentLevel) {
            userLevel = appState.currentLevel;
            console.log("üìä Nivel obtenido desde appState:", userLevel);
        } else {
            // Fallback a localStorage
            const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
            userLevel = userProgress.currentLevel || userProgress.level || 1;
            console.log("üìä Nivel obtenido desde localStorage:", userLevel);
        }
        
        // Mapear nivel del usuario a nivel de lecciones
        let lessonLevel;
        if (userLevel >= 5) {
            lessonLevel = 'level3'; // B1 y superior
        } else if (userLevel >= 3) {
            lessonLevel = 'level2'; // A2
        } else {
            lessonLevel = 'level1'; // A1
        }
        
        console.log("üéØ Nivel del usuario:", userLevel, "‚Üí Lecciones del nivel:", lessonLevel);
        
        // Obtener lecciones del nivel correspondiente
        if (LESSONS_DATABASE && LESSONS_DATABASE[lessonLevel]) {
            console.log("üìñ Usando lecciones del", lessonLevel + ":", LESSONS_DATABASE[lessonLevel].length, "lecciones");
            return LESSONS_DATABASE[lessonLevel];
        } else if (LESSONS_DATABASE && LESSONS_DATABASE.level1) {
            console.log("‚ö†Ô∏è Nivel", lessonLevel, "no disponible, usando level1 como fallback");
            return LESSONS_DATABASE.level1;
        }
        
        // Si no hay LESSONS_DATABASE, crear lecciones de ejemplo
        console.log("‚ö†Ô∏è LESSONS_DATABASE no disponible, creando lecciones de ejemplo");
        return [
            {
                title: "Saludos B√°sicos",
                difficulty: "Principiante",
                vocabulary: [
                    { english: "Hello", spanish: "Hola", pronunciation: "h…ôÀàlo ä" },
                    { english: "Goodbye", spanish: "Adi√≥s", pronunciation: "…° ädÀàba…™" },
                    { english: "Good morning", spanish: "Buenos d√≠as", pronunciation: "…° äd Ààm…îÀêrn…™≈ã" }
                ],
                grammar: {
                    title: "Saludos B√°sicos",
                    content: "Los saludos son expresiones que usamos para saludar a otras personas."
                }
            },
            {
                title: "N√∫meros del 1 al 10",
                difficulty: "Principiante",
                vocabulary: [
                    { english: "One", spanish: "Uno", pronunciation: "w ån" },
                    { english: "Two", spanish: "Dos", pronunciation: "tuÀê" },
                    { english: "Three", spanish: "Tres", pronunciation: "Œ∏riÀê" }
                ],
                grammar: {
                    title: "N√∫meros Cardinales",
                    content: "Los n√∫meros cardinales se usan para contar y enumerar."
                }
            },
            {
                title: "Colores B√°sicos",
                difficulty: "Principiante",
                vocabulary: [
                    { english: "Red", spanish: "Rojo", pronunciation: "red" },
                    { english: "Blue", spanish: "Azul", pronunciation: "bluÀê" },
                    { english: "Green", spanish: "Verde", pronunciation: "…°riÀên" }
                ],
                grammar: {
                    title: "Colores",
                    content: "Los colores son adjetivos que describen la apariencia de los objetos."
                }
            }
        ];
        
    } catch (error) {
        console.error("‚ùå Error al obtener lecciones permitidas:", error);
        return [];
    }
}
// L√≥gica para obtener el MCER seg√∫n dificultad
function getLessonMCERFromDifficulty(difficulty) {
    if (!difficulty) return 'A1';
    const d = String(difficulty).toLowerCase();
    if (d.includes('principiante')) return 'A1';
    if (d.includes('b√°sico')) return 'A2';
    if (d.includes('intermedio')) return 'B1';
    if (d.includes('avanzado')) return 'B2';
    return 'A1';
}

// Funci√≥n de inicializaci√≥n para el m√≥dulo de lecciones
function initLessons() {
    console.log("üöÄ M√≥dulo de lecciones inicializado");
    try {
        // Verificar si LESSONS_DATABASE est√° disponible
        if (typeof LESSONS_DATABASE === 'undefined') {
            console.error("‚ùå LESSONS_DATABASE no est√° disponible");
            return;
        }
        
        console.log("üìö LESSONS_DATABASE disponible con niveles:", Object.keys(LESSONS_DATABASE));
        
        // Verificar si appState est√° disponible
        if (typeof appState === 'undefined') {
            console.error("‚ùå appState no est√° disponible");
            return;
        }
        
        console.log("üìä appState disponible:", appState);
        
        // Configurar event listeners para los botones de lecci√≥n
        setupLessonEventListeners();
        
        // Cargar la lecci√≥n actual al inicializar
        loadCurrentLesson();
        console.log("‚úÖ Lecci√≥n actual cargada en inicializaci√≥n");
    } catch (error) {
        console.error("‚ùå Error en inicializaci√≥n del m√≥dulo de lecciones:", error);
    }
}

// Funci√≥n para configurar los event listeners de las lecciones
function setupLessonEventListeners() {
    console.log("üîó Configurando event listeners de lecciones...");
    
    // Event listener para el bot√≥n "siguiente lecci√≥n"
    const nextLessonBtn = document.getElementById('nextLessonBtn');
    if (nextLessonBtn) {
        nextLessonBtn.addEventListener('click', nextLesson);
        console.log("‚úÖ Event listener agregado al bot√≥n 'siguiente lecci√≥n'");
    } else {
        console.warn("‚ö†Ô∏è Bot√≥n 'siguiente lecci√≥n' no encontrado");
    }
    
    // Event listener para el bot√≥n "repasar"
    const reviewLessonBtn = document.getElementById('reviewLessonBtn');
    if (reviewLessonBtn) {
        reviewLessonBtn.addEventListener('click', reviewLesson);
        console.log("‚úÖ Event listener agregado al bot√≥n 'repasar'");
    } else {
        console.warn("‚ö†Ô∏è Bot√≥n 'repasar' no encontrado");
    }
}

// Funci√≥n de sincronizaci√≥n global para resolver problemas de estado
function syncGlobalState() {
    console.log("üîÑ Iniciando sincronizaci√≥n global del estado...");
    
    try {
        // 1. Sincronizar appState con localStorage
        const storedProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
        
        if (storedProgress.level && storedProgress.level !== appState.currentLevel) {
            console.log("üìä Sincronizando nivel desde localStorage:", storedProgress.level);
            appState.currentLevel = storedProgress.level;
        }
        
        if (storedProgress.xp && storedProgress.xp !== appState.currentXP) {
            console.log("üìä Sincronizando XP desde localStorage:", storedProgress.xp);
            appState.currentXP = storedProgress.xp;
        }
        
        // 2. Actualizar UI global
        if (typeof updateUI === 'function') {
            console.log("üé® Actualizando UI global...");
            updateUI();
        }
        
        // 3. Actualizar display del usuario
        if (typeof updateUserDisplay === 'function') {
            console.log("üë§ Actualizando display del usuario...");
            const currentUser = getCurrentUser();
            if (currentUser) {
                updateUserDisplay(currentUser);
            }
        }
        
        // 4. Actualizar bot√≥n de siguiente lecci√≥n
        updateNextLessonButton();
        
        // 5. Guardar progreso sincronizado SOLO si no es despu√©s del diagn√≥stico
        const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
        if (typeof saveProgress === 'function' && !userProgress.diagnosticCompleted) {
            console.log("üíæ Guardando progreso sincronizado...");
            saveProgress();
        } else if (userProgress.diagnosticCompleted) {
            console.log("‚ö†Ô∏è No guardando progreso - diagn√≥stico reci√©n completado");
        }
        
        console.log("‚úÖ Sincronizaci√≥n global completada");
        console.log("üìä Estado final:", {
            level: appState.currentLevel,
            xp: appState.currentXP,
            lesson: appState.currentLesson
        });
        
    } catch (error) {
        console.error("‚ùå Error en sincronizaci√≥n global:", error);
    }
}

// Funci√≥n para inicializar el estado desde el diagn√≥stico
function initializeFromDiagnostic(diagnosticLevel) {
    console.log("üéØ Inicializando estado desde diagn√≥stico:", diagnosticLevel);
    
    try {
        // Obtener el progreso guardado por el diagn√≥stico
        const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
        
        // Usar los valores del diagn√≥stico en lugar de sobrescribirlos
        const diagnosticLevelNum = userProgress.currentLevel || 1;
        const diagnosticXP = userProgress.currentXP || 0;
        
        console.log("üìä Valores del diagn√≥stico encontrados:", {
            level: diagnosticLevelNum,
            xp: diagnosticXP,
            mcerLevel: diagnosticLevel
        });
        
        // Actualizar appState con los valores del diagn√≥stico
        appState.currentLevel = diagnosticLevelNum;
        appState.currentXP = diagnosticXP;
        appState.currentLesson = 0;
        
        // NO sobrescribir localStorage, solo sincronizar appState
        console.log("üîÑ Sincronizando appState con valores del diagn√≥stico...");
        
        // Sincronizar estado global
        syncGlobalState();
        
        console.log("‚úÖ Estado inicializado desde diagn√≥stico:", {
            diagnosticLevel: diagnosticLevel,
            appLevel: diagnosticLevelNum,
            xp: diagnosticXP
        });
        
    } catch (error) {
        console.error("‚ùå Error al inicializar desde diagn√≥stico:", error);
    }
}

// Funci√≥n para obtener el nivel MCER actual
function getCurrentMCERLevel() {
    const xp = appState.currentXP || 0;
    
    if (xp < 100) return 'A1';
    else if (xp < 300) return 'A1+';
    else if (xp < 600) return 'A2';
    else if (xp < 1000) return 'A2+';
    else if (xp < 1500) return 'B1';
    else if (xp < 2500) return 'B1+';
    else if (xp < 4000) return 'B2';
    else if (xp < 6000) return 'B2+';
    else if (xp < 9000) return 'C1';
    else return 'C2';
}

// Exportar funciones globalmente
window.syncGlobalState = syncGlobalState;
window.initializeFromDiagnostic = initializeFromDiagnostic;
window.getCurrentMCERLevel = getCurrentMCERLevel;
window.loadCurrentLesson = loadCurrentLesson;
window.completeLesson = completeLesson;
window.reviewLesson = reviewLesson;
window.getAllowedLessonsByLevel = getAllowedLessonsByLevel;
window.getLessonMCERFromDifficulty = getLessonMCERFromDifficulty;
window.isLessonCompleted = isLessonCompleted;
window.markLessonCompleted = markLessonCompleted;
window.checkLevelUp = checkLevelUp;
window.initLessons = initLessons;
window.updateNextLessonButton = updateNextLessonButton;
window.nextLesson = nextLesson;
window.setupLessonEventListeners = setupLessonEventListeners;
