// M√≥dulo de autenticaci√≥n: registro, login, logout, overlays/modales

function handleRegister(e) {
    console.log("üìù Iniciando handleRegister...");
    e.preventDefault();
    console.log("‚úÖ Evento preventDefault ejecutado");
    
    const name = document.getElementById('registerName').value.trim();
    const email = document.getElementById('registerEmail').value.trim();
    const password = document.getElementById('registerPassword').value;
    
    console.log("üìã Datos del formulario:", { name, email, password: password ? "***" : "vac√≠a" });
    
    let users = JSON.parse(localStorage.getItem('englishLearningUsers') || '[]');
    console.log("üë• Usuarios existentes:", users.length);
    
    if (users.find(u => u.email === email)) {
        console.log("‚ö†Ô∏è Email ya registrado");
        if (typeof showNotification === 'function') {
            showNotification('El email ya est√° registrado', 'error');
        } else {
            alert('El email ya est√° registrado');
        }
        return;
    }
    
    // Crear nuevo usuario
    const newUser = { name, email, password };
    users.push(newUser);
    localStorage.setItem('englishLearningUsers', JSON.stringify(users));
    console.log("‚úÖ Usuario registrado exitosamente");
    
    // LIMPIAR cualquier progreso previo para asegurar que sea usuario nuevo
    localStorage.removeItem('englishLearningProgress');
    console.log("üßπ Progreso previo limpiado para usuario nuevo");
    
    // Hacer login autom√°tico despu√©s del registro
    console.log("üîÑ Haciendo login autom√°tico...");
    
    // Guardar sesi√≥n del usuario
    localStorage.setItem('englishLearningSession', JSON.stringify({
        email: newUser.email, 
        name: newUser.name 
    }));
    
    // Ocultar modal de autenticaci√≥n
    hideAuthModal();
    
    // Mostrar notificaci√≥n de bienvenida
    if (typeof showNotification === 'function') {
        showNotification(`üéâ ¬°Bienvenido a English Learning, ${newUser.name}!`, 'success');
    } else {
        alert(`üéâ ¬°Bienvenido a English Learning, ${newUser.name}!`);
    }
    
    console.log("üö™ Modal de autenticaci√≥n ocultado");
    
    // Actualizar display del usuario
    updateUserDisplay(newUser);
    
    // Actualizar tambi√©n el display del header principal
    const userNameDisplay = document.getElementById('userNameDisplay');
    const userLevelDisplay = document.getElementById('userLevelDisplay');
    
    if (userNameDisplay && userLevelDisplay) {
        userNameDisplay.textContent = newUser.name;
        userLevelDisplay.textContent = 'Nivel 1';
    }
    
    // Verificar si es usuario nuevo (debe serlo)
    const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
    const hasLevel = userProgress.level && userProgress.level > 0;
    
    if (!hasLevel) {
        console.log("üéØ Usuario nuevo, mostrando diagn√≥stico...");
        
        // Verificar que la funci√≥n est√© disponible
        console.log("üîç Verificando disponibilidad de showDiagnosticModal...");
        console.log("showDiagnosticModal disponible:", typeof showDiagnosticModal === 'function');
        console.log("showDiagnosticModal en window:", typeof window.showDiagnosticModal === 'function');
        
        // Mostrar modal de diagn√≥stico con delay para asegurar que el DOM est√© listo
        setTimeout(() => {
            console.log("‚è∞ Timeout ejecutado, verificando funci√≥n nuevamente...");
            console.log("showDiagnosticModal disponible:", typeof showDiagnosticModal === 'function');
            console.log("showDiagnosticModal en window:", typeof window.showDiagnosticModal === 'function');
            
            if (typeof showDiagnosticModal === 'function') {
                console.log("‚úÖ Funci√≥n disponible, ejecutando...");
                try {
                    showDiagnosticModal();
                    console.log("‚úÖ Modal de diagn√≥stico mostrado para usuario nuevo");
                } catch (error) {
                    console.error("‚ùå Error al ejecutar showDiagnosticModal:", error);
                }
            } else if (typeof window.showDiagnosticModal === 'function') {
                console.log("‚úÖ Funci√≥n disponible en window, ejecutando...");
                try {
                    window.showDiagnosticModal();
                    console.log("‚úÖ Modal de diagn√≥stico mostrado para usuario nuevo (via window)");
                } catch (error) {
                    console.error("‚ùå Error al ejecutar window.showDiagnosticModal:", error);
                }
            } else {
                console.warn("‚ö†Ô∏è showDiagnosticModal no est√° disponible");
                console.warn("üîç Buscando funci√≥n en diferentes ubicaciones...");
                
                // Buscar la funci√≥n en diferentes lugares
                const possibleLocations = [
                    'showDiagnosticModal',
                    'window.showDiagnosticModal',
                    'global.showDiagnosticModal'
                ];
                
                possibleLocations.forEach(location => {
                    try {
                        const func = eval(location);
                        if (typeof func === 'function') {
                            console.log(`‚úÖ Funci√≥n encontrada en: ${location}`);
                        } else {
                            console.log(`‚ùå No es funci√≥n en: ${location}`);
                        }
                    } catch (error) {
                        console.log(`‚ùå Error al evaluar: ${location}`);
                    }
                });
                
                // NO asignar nivel por defecto aqu√≠
                // El nivel se asignar√° DESPU√âS de completar el diagn√≥stico
                console.log("‚è∏Ô∏è Saltando asignaci√≥n de nivel hasta completar diagn√≥stico");
            }
        }, 500);
    }
    
    // NO cargar progreso y UI cuando se muestra el diagn√≥stico
    // Estas funciones se ejecutar√°n despu√©s de completar el diagn√≥stico
    console.log("‚è∏Ô∏è Saltando carga de progreso/UI hasta completar diagn√≥stico");
}

function handleLogin(e) {
    console.log("üîê Iniciando handleLogin...");
    e.preventDefault();
    console.log("‚úÖ Evento preventDefault ejecutado");
    
    console.log("üìù Evento recibido:", e);
    console.log("üéØ Elemento que dispar√≥ el evento:", e.target);
    
    const email = document.getElementById('loginEmail').value.trim();
    const password = document.getElementById('loginPassword').value;
    console.log("üìß Email:", email);
    console.log("üîë Contrase√±a:", password ? "***" : "vac√≠a");
    
    let users = JSON.parse(localStorage.getItem('englishLearningUsers') || '[]');
    console.log("üë• Usuarios encontrados:", users.length);
    console.log("üìã Lista de usuarios:", users);
    
    const user = users.find(u => u.email === email && u.password === password);
    if (!user) {
        console.log("‚ùå Usuario no encontrado o contrase√±a incorrecta");
        if (typeof showNotification === 'function') {
            showNotification('Email o contrase√±a incorrectos', 'error');
        } else {
            console.warn("‚ö†Ô∏è showNotification no est√° disponible");
            alert('Email o contrase√±a incorrectos');
        }
        return;
    }
    
    console.log("‚úÖ Usuario autenticado:", user.name);
    
    localStorage.setItem('englishLearningSession', JSON.stringify({
        email: user.email, 
        name: user.name 
    }));
    console.log("üíæ Sesi√≥n guardada en localStorage");
    
    hideAuthModal();
    console.log("üö™ Modal ocultado");
    
    if (typeof showNotification === 'function') {
        showNotification(`üëã ¬°Bienvenido de vuelta, ${user.name}!`, 'success');
        console.log("üîî Notificaci√≥n mostrada");
    } else {
        console.warn("‚ö†Ô∏è showNotification no est√° disponible");
        alert(`üëã ¬°Bienvenido de vuelta, ${user.name}!`);
    }
    
    updateUserDisplay();
    console.log("üë§ Display del usuario actualizado");
    
    // Actualizar tambi√©n el display del header principal
    const userNameDisplay = document.getElementById('userNameDisplay');
    const userLevelDisplay = document.getElementById('userLevelDisplay');
    
    if (userNameDisplay && userLevelDisplay) {
        userNameDisplay.textContent = user.name;
        
        // Obtener nivel del usuario
        const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
        const level = userProgress.level || 1;
        userLevelDisplay.textContent = `Nivel ${level}`;
    }
    
    // Verificar si el usuario ya tiene un nivel asignado
    const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
    const hasLevel = userProgress.level && userProgress.level > 0;
    
    if (!hasLevel) {
        console.log("üéØ Usuario nuevo, mostrando diagn√≥stico...");
        // Mostrar modal de diagn√≥stico
        if (typeof showDiagnosticModal === 'function') {
            // Peque√±o delay para asegurar que el DOM est√© listo
            setTimeout(() => {
                showDiagnosticModal();
                console.log("‚úÖ Modal de diagn√≥stico mostrado");
            }, 100);
        } else {
            console.warn("‚ö†Ô∏è showDiagnosticModal no est√° disponible");
            // NO asignar nivel por defecto aqu√≠
            // El nivel se asignar√° DESPU√âS de completar el diagn√≥stico
            console.log("‚è∏Ô∏è Saltando asignaci√≥n de nivel hasta completar diagn√≥stico");
        }
    } else {
        console.log("üìä Usuario existente, nivel actual:", userProgress.level);
    }
    
    try {
        console.log("üìä Cargando progreso...");
        if (typeof loadProgress === 'function') {
            loadProgress();
            console.log("‚úÖ Progreso cargado");
        } else {
            console.warn("‚ö†Ô∏è loadProgress no est√° disponible");
        }
        
        console.log("üé® Actualizando UI...");
        if (typeof updateUI === 'function') {
            updateUI();
            console.log("‚úÖ UI actualizada");
        } else {
            console.warn("‚ö†Ô∏è updateUI no est√° disponible");
        }
        
        console.log("üìö Cargando lecci√≥n actual...");
        if (typeof loadCurrentLesson === 'function') {
            loadCurrentLesson();
            console.log("‚úÖ Lecci√≥n actual cargada");
        } else {
            console.warn("‚ö†Ô∏è loadCurrentLesson no est√° disponible");
        }
        
        // Inicializar sistema de pr√°ctica si est√° disponible
        console.log("üéØ Inicializando sistema de pr√°ctica...");
        if (window.practiceSystem && typeof window.practiceSystem.initialize === 'function') {
            const currentUser = {
                email: user.email,
                name: user.name,
                currentLevel: userProgress.level || 1
            };
            window.practiceSystem.initialize(currentUser);
            console.log("‚úÖ Sistema de pr√°ctica inicializado");
        } else {
            console.warn("‚ö†Ô∏è Sistema de pr√°ctica no disponible");
        }
        
        console.log("üéâ Login completado exitosamente");
    } catch (error) {
        console.error("‚ùå Error durante la carga:", error);
    }
}

// Funci√≥n para obtener el usuario actual de la sesi√≥n
function getCurrentUser() {
    try {
        const session = JSON.parse(localStorage.getItem('englishLearningSession') || 'null');
        return session;
    } catch (error) {
        console.error("‚ùå Error al obtener usuario actual:", error);
        return null;
    }
}

// Funci√≥n para verificar si hay una sesi√≥n activa
function isAuthenticated() {
    const session = getCurrentUser();
    return !!(session && session.email);
}

function updateUserDisplay(user) {
    console.log("üë§ Actualizando display del usuario...");
    try {
        const userDisplay = document.getElementById('userDisplay');
        const userNameDisplay = document.getElementById('userNameDisplay');
        const userLevelDisplay = document.getElementById('userLevelDisplay');
        
        // Verificar si los elementos existen antes de continuar
        if (!userDisplay) {
            console.log("‚ö†Ô∏è Elemento userDisplay no encontrado, saltando actualizaci√≥n");
            return;
        }
        
        if (user) {
            console.log("‚úÖ Usuario encontrado, mostrando informaci√≥n");
            userDisplay.style.display = 'flex';
            
            const userInfo = userDisplay.querySelector('.user-info');
            const userName = userDisplay.querySelector('.user-name');
            const userLevel = userDisplay.querySelector('.user-level');
            
            if (userInfo && userName && userLevel) {
                userName.textContent = user.name;
                
                // Obtener nivel del usuario
                const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
                const level = userProgress.level || 1;
                
                const levelNames = {
                    1: "Principiante",
                    2: "Intermedio", 
                    3: "Avanzado"
                };
                
                const levelText = levelNames[level] || "Principiante";
                userLevel.textContent = levelText;
                
                // Actualizar tambi√©n el display en el header principal
                if (userNameDisplay && userLevelDisplay) {
                    userNameDisplay.textContent = user.name;
                    userLevelDisplay.textContent = `Nivel ${level}`;
                }
                
                console.log("‚úÖ Display del usuario actualizado");
            } else {
                console.warn("‚ö†Ô∏è Elementos internos de userDisplay no encontrados");
            }
        } else {
            console.log("‚ùå No hay usuario activo, ocultando display");
            userDisplay.style.display = 'none';
            
            // Resetear el display del header principal
            if (userNameDisplay && userLevelDisplay) {
                userNameDisplay.textContent = 'Usuario';
                userLevelDisplay.textContent = 'Nivel A1';
            }
        }
    } catch (error) {
        console.error("‚ùå Error al actualizar display del usuario:", error);
    }
}

function checkAuth() {
    console.log("üîç Verificando autenticaci√≥n...");
    try {
        // Verificar si ya se est√° mostrando el diagn√≥stico
        const diagnosticModal = document.getElementById('diagnosticModal');
        if (diagnosticModal && diagnosticModal.style.display === 'block') {
            console.log("‚ö†Ô∏è Diagn√≥stico ya visible, saltando checkAuth...");
            return true;
        }
        
        const session = getCurrentUser();
        
        if (session && session.email) {
            console.log("‚úÖ Usuario autenticado:", session.email);
            
            // Actualizar UI del usuario
            updateUserDisplay(session);
            
            // Ocultar modal de autenticaci√≥n si est√° visible
            hideAuthModal();
            
            // Verificar si el usuario ya complet√≥ el diagn√≥stico
            const userProgress = JSON.parse(localStorage.getItem('englishLearningProgress') || '{}');
            const hasLevel = userProgress.level && userProgress.diagnosticCompleted;
            
            if (!hasLevel) {
                console.log("üéØ Usuario nuevo, mostrando diagn√≥stico...");
                
                // Verificar que la funci√≥n est√© disponible
                console.log("üîç Verificando disponibilidad de showDiagnosticModal...");
                console.log("showDiagnosticModal disponible:", typeof showDiagnosticModal === 'function');
                console.log("showDiagnosticModal en window:", typeof window.showDiagnosticModal === 'function');
                
                // Mostrar modal de diagn√≥stico con delay para asegurar que el DOM est√© listo
                setTimeout(() => {
                    console.log("‚è∞ Timeout ejecutado, verificando funci√≥n nuevamente...");
                    console.log("showDiagnosticModal disponible:", typeof showDiagnosticModal === 'function');
                    console.log("showDiagnosticModal en window:", typeof window.showDiagnosticModal === 'function');
                    
                    if (typeof showDiagnosticModal === 'function') {
                        showDiagnosticModal();
                        console.log("‚úÖ Diagn√≥stico mostrado correctamente");
                    } else if (typeof window.showDiagnosticModal === 'function') {
                        window.showDiagnosticModal();
                        console.log("‚úÖ Diagn√≥stico mostrado desde window");
                    } else {
                        console.error("‚ùå showDiagnosticModal no est√° disponible");
                        // Fallback: mostrar notificaci√≥n
                        if (typeof showNotification === 'function') {
                            showNotification('Error: No se pudo mostrar el diagn√≥stico', 'error');
                        }
                    }
                }, 500);
            } else {
                console.log("‚úÖ Usuario ya tiene nivel asignado:", userProgress.level);
            }
            
            return true;
        } else {
            console.log("‚ùå No hay sesi√≥n activa");
            updateUserDisplay(null);
            
            // NO mostrar diagn√≥stico autom√°ticamente aqu√≠
            // Solo mostrar modal de autenticaci√≥n
            console.log("üö™ Mostrando modal de autenticaci√≥n para usuario no autenticado");
            showAuthModal();
            
            return false;
        }
    } catch (error) {
        console.error("‚ùå Error en checkAuth:", error);
        updateUserDisplay(null);
        return false;
    }
}

function logout() {
    localStorage.removeItem('englishLearningSession');
    
    // Resetear el display del header principal
    const userNameDisplay = document.getElementById('userNameDisplay');
    const userLevelDisplay = document.getElementById('userLevelDisplay');
    
    if (userNameDisplay && userLevelDisplay) {
        userNameDisplay.textContent = 'Usuario';
        userLevelDisplay.textContent = 'Nivel A1';
    }
    
    updateUserDisplay();
    showAuthModal();
}

function showAuthModal() {
    console.log("üö™ Iniciando showAuthModal...");
    try {
        const authOverlay = document.getElementById('authOverlay');
        const authModal = document.getElementById('authModal');
        
        console.log("üéØ Elementos encontrados:", {
            authOverlay: !!authOverlay,
            authModal: !!authModal
        });
        
        if (authOverlay && authModal) {
            console.log("‚úÖ Elementos encontrados, mostrando modal...");
            
            // Verificar estilos antes de cambiar
            console.log("üé® Estilos ANTES del cambio:", {
                overlayDisplay: authOverlay.style.display,
                modalDisplay: authModal.style.display,
                overlayVisibility: authOverlay.style.visibility,
                modalVisibility: authModal.style.visibility,
                overlayOpacity: authOverlay.style.opacity,
                modalOpacity: authModal.style.opacity,
                overlayZIndex: authOverlay.style.zIndex,
                modalZIndex: authModal.style.zIndex
            });
            
            authOverlay.style.display = 'block';
            authModal.style.display = 'block';
            
            console.log("üé® Estilos aplicados");
            
            // Verificar que el modal sea visible
            setTimeout(() => {
                const isVisible = authModal.style.display === 'block';
                console.log("üëÅÔ∏è Modal visible:", isVisible);
                console.log("üé® Estilos DESPU√âS del cambio:", {
                    overlayDisplay: authOverlay.style.display,
                    modalDisplay: authModal.style.display,
                    overlayVisibility: authOverlay.style.visibility,
                    modalVisibility: authModal.style.visibility,
                    overlayOpacity: authOverlay.style.opacity,
                    modalOpacity: authModal.style.opacity,
                    overlayZIndex: authOverlay.style.zIndex,
                    modalZIndex: authModal.style.zIndex
                });
                
                // Verificar si hay estilos CSS que puedan estar interfiriendo
                const computedOverlay = window.getComputedStyle(authOverlay);
                const computedModal = window.getComputedStyle(authModal);
                
                console.log("üé® Estilos CSS computados:", {
                    overlayDisplay: computedOverlay.display,
                    modalDisplay: computedModal.display,
                    overlayVisibility: computedOverlay.visibility,
                    modalVisibility: computedModal.visibility,
                    overlayOpacity: computedOverlay.opacity,
                    modalOpacity: computedModal.opacity,
                    overlayZIndex: computedOverlay.zIndex,
                    modalZIndex: computedModal.zIndex
                });
                
                // Verificar si el modal est√° en el viewport
                const modalRect = authModal.getBoundingClientRect();
                const viewportWidth = window.innerWidth;
                const viewportHeight = window.innerHeight;
                
                console.log("üìç Posici√≥n del modal:", {
                    top: modalRect.top,
                    left: modalRect.left,
                    width: modalRect.width,
                    height: modalRect.height,
                    visible: modalRect.width > 0 && modalRect.height > 0,
                    viewportWidth: viewportWidth,
                    viewportHeight: viewportHeight,
                    inViewport: modalRect.left >= 0 && modalRect.right <= viewportWidth && modalRect.top >= 0 && modalRect.bottom <= viewportHeight
                });
                
                // Si el modal est√° fuera del viewport, ajustar la posici√≥n
                if (modalRect.left < 0 || modalRect.right > viewportWidth || modalRect.top < 0 || modalRect.bottom > viewportHeight) {
                    console.log("‚ö†Ô∏è Modal fuera del viewport, ajustando posici√≥n...");
                    
                    // Ajustar a pantallas peque√±as
                    if (viewportWidth <= 600) {
                        authModal.style.left = '2.5vw';
                        authModal.style.transform = 'translate(0, -50%)';
                        console.log("‚úÖ Modal ajustado para pantallas peque√±as");
                    }
                }
                
            }, 100);
        } else {
            console.error("‚ùå Elementos no encontrados");
        }
    } catch (error) {
        console.error("‚ùå Error en showAuthModal:", error);
    }
}

function hideAuthModal() {
    console.log("üö™ Iniciando hideAuthModal...");
    try {
        const authOverlay = document.getElementById('authOverlay');
        const authModal = document.getElementById('authModal');
        
        console.log("üéØ Elementos encontrados:", {
            authOverlay: !!authOverlay,
            authModal: !!authModal
        });
        
        if (authOverlay && authModal) {
            console.log("‚úÖ Elementos encontrados, ocultando modal...");
            authOverlay.style.display = 'none';
            authModal.style.display = 'none';
            console.log("üé® Estilos aplicados para ocultar");
        } else {
            console.error("‚ùå Elementos no encontrados");
        }
    } catch (error) {
        console.error("‚ùå Error en hideAuthModal:", error);
    }
}

function setupAuthTabs() {
    console.log("üîß Iniciando setupAuthTabs...");
    try {
        const tabs = document.querySelectorAll('.auth-tab');
        const forms = document.querySelectorAll('.auth-form');
        
        console.log("üéØ Elementos encontrados:", {
            tabs: tabs.length,
            forms: forms.length
        });
        
        if (tabs.length > 0 && forms.length > 0) {
            console.log("‚úÖ Elementos encontrados, configurando eventos...");
            
            // Configurar eventos de tabs
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    console.log("üñ±Ô∏è Tab clickeado:", this.dataset.tab);
                    tabs.forEach(t => t.classList.remove('active'));
                    forms.forEach(f => f.classList.remove('active'));
                    this.classList.add('active');
                    
                    const targetForm = document.querySelector(`.auth-form[data-tab="${this.dataset.tab}"]`);
                    if (targetForm) {
                        targetForm.classList.add('active');
                        console.log("‚úÖ Formulario activado:", this.dataset.tab);
                    } else {
                        console.warn("‚ö†Ô∏è Formulario no encontrado para:", this.dataset.tab);
                    }
                });
            });
            
            // Configurar eventos de formularios
            const loginForm = document.getElementById('loginForm');
            const registerForm = document.getElementById('registerForm');
            
            if (loginForm) {
                console.log("üîê Configurando evento de login...");
                loginForm.addEventListener('submit', handleLogin);
                console.log("‚úÖ Evento de login configurado");
            } else {
                console.error("‚ùå Formulario de login no encontrado");
            }
            
            if (registerForm) {
                console.log("üìù Configurando evento de registro...");
                registerForm.addEventListener('submit', handleRegister);
                console.log("‚úÖ Evento de registro configurado");
            } else {
                console.error("‚ùå Formulario de registro no encontrado");
            }
            
            console.log("‚úÖ Eventos de tabs y formularios configurados correctamente");
        } else {
            console.error("‚ùå No se encontraron tabs o forms");
        }
    } catch (error) {
        console.error("‚ùå Error en setupAuthTabs:", error);
    }
}

// Variable para controlar si los tabs ya se configuraron
let authTabsConfigured = false;

// Funci√≥n de inicializaci√≥n para el m√≥dulo de autenticaci√≥n
function initAuth() {
    console.log("üöÄ M√≥dulo de autenticaci√≥n inicializado");
    try {
        // Solo configurar tabs una vez
        if (!authTabsConfigured) {
            setupAuthTabs();
            console.log("‚úÖ Tabs de autenticaci√≥n configurados");
            authTabsConfigured = true;
        } else {
            console.log("‚úÖ Tabs ya configurados, saltando...");
        }
        
        // Verificar autenticaci√≥n cada vez
        const session = getCurrentUser();
        if (!session || !session.email) {
            console.log("üîç No hay sesi√≥n activa, verificando autenticaci√≥n...");
            checkAuth();
            console.log("‚úÖ Verificaci√≥n de autenticaci√≥n completada");
        } else {
            console.log("‚úÖ Sesi√≥n ya activa, saltando verificaci√≥n de autenticaci√≥n");
        }
        
        console.log("‚úÖ M√≥dulo de autenticaci√≥n inicializado correctamente");
        
    } catch (error) {
        console.error("‚ùå Error en inicializaci√≥n del m√≥dulo de autenticaci√≥n:", error);
    }
}

// Exportar funciones globalmente
window.handleRegister = handleRegister;
window.handleLogin = handleLogin;
window.setupAuthTabs = setupAuthTabs;
window.checkAuth = checkAuth;
window.logout = logout;
window.updateUserDisplay = updateUserDisplay;
window.showAuthModal = showAuthModal;
window.hideAuthModal = hideAuthModal;
window.initAuth = initAuth;
